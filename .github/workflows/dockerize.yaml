name: Deploy deeplinks app
on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'postgresql/**'
  workflow_dispatch:
defaults:
  run:
    working-directory: ./
env:
  MIGRATIONS_ID_TYPE_SQL: bigint
  MIGRATIONS_HASURA_PATH: localhost:8080
  MIGRATIONS_HASURA_SSL: 0
  MIGRATIONS_HASURA_SECRET: myadminsecretkey
  MIGRATIONS_DEEPLINKS_URL: http://host.docker.internal:3006
  JWT_SECRET: '{"type":"HS256","key":"3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R"}'
jobs:
  dockerize:
    name: dockerize
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: ci
        run: npm ci
      - name: build
        run: npm run package:build
      - name: docker-ver backup dir
        run: mkdir backup
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: deepf/deeplinks
      - name: build docker image for 
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: docker init
        run: export DEEPLINKS_PUBLIC_URL=http://localhost:3006 && export NEXT_PUBLIC_DEEPLINKS_URL=http://localhost:3006 && export NEXT_PUBLIC_GQL_PATH=http://localhost:3006/gql && export NEXT_PUBLIC_GQL_SSL=0 && export NEXT_PUBLIC_DEEPLINKS_SERVER=http://localhost:3007 && export NEXT_PUBLIC_ENGINES_ROUTE=0 && export NEXT_PUBLIC_DISABLE_CONNECTOR=1 && export JWT_SECRET='{"type":"HS256","key":"6HZ/FHOibbfr6FsGaArmXVwY1JEO+l2lTVDJeibc2yj2T6OKmx5dIw3UtMFBdUkhd9Q="}' && export HASURA_GRAPHQL_JWT_SECRET='{"type":"HS256","key":"6HZ/FHOibbfr6FsGaArmXVwY1JEO+l2lTVDJeibc2yj2T6OKmx5dIw3UtMFBdUkhd9Q="}' && export DEEP_HASURA_GRAPHQL_JWT_SECRET='{"type":"HS256","key":"6HZ/FHOibbfr6FsGaArmXVwY1JEO+l2lTVDJeibc2yj2T6OKmx5dIw3UtMFBdUkhd9Q="}' && export DEEPLINKS_HASURA_STORAGE_URL=http://deep-hasura-storage:8000/ && export HASURA_ENDPOINT=http://deep-hasura:8080/v1 && export DOCKER_DEEPLINKS_URL=http://deep-links:3006 && export MIGRATIONS_DEEPLINKS_URL=http://deep-links:3006 && export HASURA_GRAPHQL_ADMIN_SECRET=e9cd987d6c7dd8206a34f7790fed2a29 && export MIGRATIONS_HASURA_SECRET=e9cd987d6c7dd8206a34f7790fed2a29 && export DEEPLINKS_HASURA_SECRET=e9cd987d6c7dd8206a34f7790fed2a29 && export POSTGRES_PASSWORD=d2ef4e87ecc262ff4615887006d8b7b4 && export HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:d2ef4e87ecc262ff4615887006d8b7b4@deep-postgres:5432/postgres?sslmode=disable && export POSTGRES_MIGRATIONS_SOURCE=postgres://postgres:d2ef4e87ecc262ff4615887006d8b7b4@deep-postgres:5432/postgres?sslmode=disable && export RESTORE_VOLUME_FROM_SNAPSHOT=0 && export MANUAL_MIGRATIONS=1 && export MINIO_ROOT_USER=ce790e9910e093881a2f88382ac18c47 && export MINIO_ROOT_PASSWORD=01f99f6095777953c9470ddecfe45931 && export S3_ACCESS_KEY=ce790e9910e093881a2f88382ac18c47 && export S3_SECRET_KEY=01f99f6095777953c9470ddecfe45931 && export DEEPLINKS_PORT=3006 && export DEEPCASE_PORT=3007 && export npm_config_yes=true && export DEEP_HASURA_PORT=8080 && export DEEP_HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:d2ef4e87ecc262ff4615887006d8b7b4@deep-postgres:5432/postgres?sslmode=disable && export HASURA_GRAPHQL_ENABLE_CONSOLE=true && export DEEP_HASURA_GRAPHQL_ENABLE_CONSOLE=true && export HASURA_GRAPHQL_DEV_MODE=true && export DEEP_HASURA_GRAPHQL_DEV_MODE=true && export HASURA_GRAPHQL_LOG_LEVEL=debug && export DEEP_HASURA_GRAPHQL_LOG_LEVEL=debug && export HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup,http-log,webhook-log,websocket-log,query-log && export DEEP_HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup,http-log,webhook-log,websocket-log,query-log && export DEEP_HASURA_GRAPHQL_ADMIN_SECRET=e9cd987d6c7dd8206a34f7790fed2a29 && export HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS=true && export DEEP_HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS=true && export HASURA_GRAPHQL_UNAUTHORIZED_ROLE=undefined && export DEEP_HASURA_GRAPHQL_UNAUTHORIZED_ROLE=undefined && export DEEP_POSTGRES_PORT=5432 && export POSTGRES_USER=postgres && export DEEP_POSTGRES_USER=postgres && export DEEP_POSTGRES_PASSWORD=d2ef4e87ecc262ff4615887006d8b7b4 && export PGGSSENCMODE=disable && export DEEP_POSTGRES_GSS_ENCODING_MODE=disable && export PGSSLMODE=disable && export DEEP_POSTGRES_SSL_MODE=disable && export PGREQUIRESSL=0 && export DEEP_POSTGRES_REQUIRE_SSL=0 && export DEEP_HASURA_STORAGE_PORT=8000 && export DEEP_HASURA_STORAGE_HASURA_GRAPHQL_ADMIN_SECRET=e9cd987d6c7dd8206a34f7790fed2a29 && export HASURA_STORAGE_DEBUG=true && export DEEP_HASURA_STORAGE_DEBUG=true && export HASURA_METADATA=1 && export DEEP_HASURA_STORAGE_HASURA_METADATA=1 && export DEEP_HASURA_STORAGE_HASURA_ENDPOINT=http://deep-hasura:8080/v1 && export S3_ENDPOINT=http://deep-minio:9000 && export DEEP_HASURA_STORAGE_S3_ENDPOINT=http://deep-minio:9000 && export DEEP_HASURA_STORAGE_S3_ACCESS_KEY=ce790e9910e093881a2f88382ac18c47 && export DEEP_HASURA_STORAGE_S3_SECRET_KEY=01f99f6095777953c9470ddecfe45931 && export S3_BUCKET=default && export DEEP_HASURA_STORAGE_S3_BUCKET=default && export S3_ROOT_FOLDER=default && export DEEP_HASURA_STORAGE_S3_ROOT_FOLDER=default && export POSTGRES_MIGRATIONS=0 && export DEEP_HASURA_STORAGE_POSTGRES_MIGRATIONS=0 && export DEEP_HASURA_STORAGE_POSTGRES_MIGRATIONS_SOURCE=postgres://postgres:d2ef4e87ecc262ff4615887006d8b7b4@deep-postgres:5432/postgres?sslmode=disable && export DEEP_MINIO_PORT=9000 && export DEEP_MINIO_CONSOLE_PORT=32765 && export DEEP_MINIO_ROOT_USER=ce790e9910e093881a2f88382ac18c47 && export DEEP_MINIO_ROOT_PASSWORD=01f99f6095777953c9470ddecfe45931 && export MIGRATIONS_ID_TYPE_SQL=bigint && export MIGRATIONS_ID_TYPE_GQL=bigint && export MIGRATIONS_SCHEMA=public && export MIGRATIONS_RL_TABLE=rl_example__links__reserved && export MIGRATIONS_DATE_TYPE_SQL=timestamp && export RESERVED_LIFETIME_MS=86400000 && export MIGRATIONS_DIR=/tmp/deep && export MIGRATIONS_HASURA_PATH=localhost:8080 && export DEEPLINKS_HASURA_PATH=localhost:8080 && export MIGRATIONS_HASURA_SSL=0 && export DEEPLINKS_HASURA_SSL=0 && docker compose -p deep up --force-recreate -d
      - name: docker logs deep-links
        run: docker logs deep-links
      - name: migrate
        run: npm run migrate
      - name: snapshot:create
        run: 'npm run snapshot:create'
      - name: docker-ver backup volume
        run: docker run --rm --volumes-from deep-postgres -v $(pwd):/temp ubuntu tar -c -v -C /var/lib/postgresql -f /temp/backup/volume.tar ./data
      - name: docker-ver backup migrations log
        run: cp .migrate backup/.migrate
      - name: Extract metadata (tags, labels) for Docker
        id: meta_push
        uses: docker/metadata-action@v3
        with:
          images: deepf/deeplinks
      - name: build docker image and push
        id: docker_build_push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta_push.outputs.tags }}
          labels: ${{ steps.meta_push.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build_push.outputs.digest }}
      - name: Collect Docker Logs
        if: failure()
        uses: jwalton/gh-docker-logs@v2.2.2
        with:
          dest: './logs'
      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz
